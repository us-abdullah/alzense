{"ast":null,"code":"export class GPSService {\n  constructor(onLocationUpdate, onError) {\n    this.watchId = null;\n    this.onLocationUpdate = null;\n    this.onError = null;\n    this.onLocationUpdate = onLocationUpdate;\n    this.onError = onError;\n  }\n  async startTracking() {\n    if (!navigator.geolocation) {\n      var _this$onError;\n      (_this$onError = this.onError) === null || _this$onError === void 0 ? void 0 : _this$onError.call(this, new GeolocationPositionError());\n      return false;\n    }\n    try {\n      // First, get current position\n      const position = await this.getCurrentPosition();\n      if (position) {\n        var _this$onLocationUpdat;\n        (_this$onLocationUpdat = this.onLocationUpdate) === null || _this$onLocationUpdat === void 0 ? void 0 : _this$onLocationUpdat.call(this, this.positionToLocation(position));\n      }\n\n      // Then start watching for updates\n      this.watchId = navigator.geolocation.watchPosition(position => {\n        var _this$onLocationUpdat2;\n        (_this$onLocationUpdat2 = this.onLocationUpdate) === null || _this$onLocationUpdat2 === void 0 ? void 0 : _this$onLocationUpdat2.call(this, this.positionToLocation(position));\n      }, error => {\n        var _this$onError2;\n        console.error('GPS error:', error);\n        (_this$onError2 = this.onError) === null || _this$onError2 === void 0 ? void 0 : _this$onError2.call(this, error);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 5000\n      });\n      return true;\n    } catch (error) {\n      var _this$onError3;\n      console.error('Failed to start GPS tracking:', error);\n      (_this$onError3 = this.onError) === null || _this$onError3 === void 0 ? void 0 : _this$onError3.call(this, error);\n      return false;\n    }\n  }\n  stopTracking() {\n    if (this.watchId !== null) {\n      navigator.geolocation.clearWatch(this.watchId);\n      this.watchId = null;\n    }\n  }\n  getCurrentPosition() {\n    return new Promise(resolve => {\n      navigator.geolocation.getCurrentPosition(position => resolve(position), error => {\n        console.error('Failed to get current position:', error);\n        resolve(null);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      });\n    });\n  }\n  positionToLocation(position) {\n    return {\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n      accuracy: position.coords.accuracy,\n      timestamp: position.timestamp\n    };\n  }\n\n  // Calculate distance between two points in meters\n  static calculateDistance(loc1, loc2) {\n    const R = 6371e3; // Earth's radius in meters\n    const φ1 = loc1.latitude * Math.PI / 180;\n    const φ2 = loc2.latitude * Math.PI / 180;\n    const Δφ = (loc2.latitude - loc1.latitude) * Math.PI / 180;\n    const Δλ = (loc2.longitude - loc1.longitude) * Math.PI / 180;\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  // Check if location is within a certain radius of another location\n  static isWithinRadius(center, point, radiusMeters) {\n    return this.calculateDistance(center, point) <= radiusMeters;\n  }\n}","map":{"version":3,"names":["GPSService","constructor","onLocationUpdate","onError","watchId","startTracking","navigator","geolocation","_this$onError","call","GeolocationPositionError","position","getCurrentPosition","_this$onLocationUpdat","positionToLocation","watchPosition","_this$onLocationUpdat2","error","_this$onError2","console","enableHighAccuracy","timeout","maximumAge","_this$onError3","stopTracking","clearWatch","Promise","resolve","latitude","coords","longitude","accuracy","timestamp","calculateDistance","loc1","loc2","R","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","isWithinRadius","center","point","radiusMeters"],"sources":["C:/Users/usman/.cursor/alzense/src/services/gps.ts"],"sourcesContent":["import { Location } from '../types';\r\n\r\nexport class GPSService {\r\n  private watchId: number | null = null;\r\n  private onLocationUpdate: ((location: Location) => void) | null = null;\r\n  private onError: ((error: GeolocationPositionError) => void) | null = null;\r\n\r\n  constructor(\r\n    onLocationUpdate: (location: Location) => void,\r\n    onError: (error: GeolocationPositionError) => void\r\n  ) {\r\n    this.onLocationUpdate = onLocationUpdate;\r\n    this.onError = onError;\r\n  }\r\n\r\n  async startTracking(): Promise<boolean> {\r\n    if (!navigator.geolocation) {\r\n      this.onError?.(new GeolocationPositionError());\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // First, get current position\r\n      const position = await this.getCurrentPosition();\r\n      if (position) {\r\n        this.onLocationUpdate?.(this.positionToLocation(position));\r\n      }\r\n\r\n      // Then start watching for updates\r\n      this.watchId = navigator.geolocation.watchPosition(\r\n        (position) => {\r\n          this.onLocationUpdate?.(this.positionToLocation(position));\r\n        },\r\n        (error) => {\r\n          console.error('GPS error:', error);\r\n          this.onError?.(error);\r\n        },\r\n        {\r\n          enableHighAccuracy: true,\r\n          timeout: 10000,\r\n          maximumAge: 5000\r\n        }\r\n      );\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to start GPS tracking:', error);\r\n      this.onError?.(error as GeolocationPositionError);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  stopTracking(): void {\r\n    if (this.watchId !== null) {\r\n      navigator.geolocation.clearWatch(this.watchId);\r\n      this.watchId = null;\r\n    }\r\n  }\r\n\r\n  private getCurrentPosition(): Promise<GeolocationPosition | null> {\r\n    return new Promise((resolve) => {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => resolve(position),\r\n        (error) => {\r\n          console.error('Failed to get current position:', error);\r\n          resolve(null);\r\n        },\r\n        {\r\n          enableHighAccuracy: true,\r\n          timeout: 10000,\r\n          maximumAge: 60000\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  private positionToLocation(position: GeolocationPosition): Location {\r\n    return {\r\n      latitude: position.coords.latitude,\r\n      longitude: position.coords.longitude,\r\n      accuracy: position.coords.accuracy,\r\n      timestamp: position.timestamp\r\n    };\r\n  }\r\n\r\n  // Calculate distance between two points in meters\r\n  static calculateDistance(loc1: Location, loc2: Location): number {\r\n    const R = 6371e3; // Earth's radius in meters\r\n    const φ1 = (loc1.latitude * Math.PI) / 180;\r\n    const φ2 = (loc2.latitude * Math.PI) / 180;\r\n    const Δφ = ((loc2.latitude - loc1.latitude) * Math.PI) / 180;\r\n    const Δλ = ((loc2.longitude - loc1.longitude) * Math.PI) / 180;\r\n\r\n    const a =\r\n      Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n      Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    return R * c;\r\n  }\r\n\r\n  // Check if location is within a certain radius of another location\r\n  static isWithinRadius(\r\n    center: Location,\r\n    point: Location,\r\n    radiusMeters: number\r\n  ): boolean {\r\n    return this.calculateDistance(center, point) <= radiusMeters;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}