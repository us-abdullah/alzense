{"ast":null,"code":"const STORAGE_KEYS = {\n  SESSIONS: 'alzense_sessions',\n  CALM_ZONES: 'alzense_calm_zones',\n  STRESS_ZONES: 'alzense_stress_zones',\n  APP_STATE: 'alzense_app_state'\n};\nexport class StorageService {\n  // Sessions\n  static saveSessions(sessions) {\n    try {\n      localStorage.setItem(STORAGE_KEYS.SESSIONS, JSON.stringify(sessions));\n    } catch (error) {\n      console.error('Failed to save sessions:', error);\n    }\n  }\n  static loadSessions() {\n    try {\n      const data = localStorage.getItem(STORAGE_KEYS.SESSIONS);\n      return data ? JSON.parse(data) : [];\n    } catch (error) {\n      console.error('Failed to load sessions:', error);\n      return [];\n    }\n  }\n  static addSession(session) {\n    const sessions = this.loadSessions();\n    sessions.push(session);\n    this.saveSessions(sessions);\n  }\n  static updateSession(session) {\n    const sessions = this.loadSessions();\n    const index = sessions.findIndex(s => s.id === session.id);\n    if (index !== -1) {\n      sessions[index] = session;\n      this.saveSessions(sessions);\n    }\n  }\n\n  // Calm Zones\n  static saveCalmZones(zones) {\n    try {\n      localStorage.setItem(STORAGE_KEYS.CALM_ZONES, JSON.stringify(zones));\n    } catch (error) {\n      console.error('Failed to save calm zones:', error);\n    }\n  }\n  static loadCalmZones() {\n    try {\n      const data = localStorage.getItem(STORAGE_KEYS.CALM_ZONES);\n      return data ? JSON.parse(data) : [];\n    } catch (error) {\n      console.error('Failed to load calm zones:', error);\n      return [];\n    }\n  }\n\n  // Stress Zones\n  static saveStressZones(zones) {\n    try {\n      localStorage.setItem(STORAGE_KEYS.STRESS_ZONES, JSON.stringify(zones));\n    } catch (error) {\n      console.error('Failed to save stress zones:', error);\n    }\n  }\n  static loadStressZones() {\n    try {\n      const data = localStorage.getItem(STORAGE_KEYS.STRESS_ZONES);\n      return data ? JSON.parse(data) : [];\n    } catch (error) {\n      console.error('Failed to load stress zones:', error);\n      return [];\n    }\n  }\n\n  // App State\n  static saveAppState(state) {\n    try {\n      const currentState = this.loadAppState();\n      const newState = {\n        ...currentState,\n        ...state\n      };\n      localStorage.setItem(STORAGE_KEYS.APP_STATE, JSON.stringify(newState));\n    } catch (error) {\n      console.error('Failed to save app state:', error);\n    }\n  }\n  static loadAppState() {\n    try {\n      const data = localStorage.getItem(STORAGE_KEYS.APP_STATE);\n      return data ? JSON.parse(data) : {};\n    } catch (error) {\n      console.error('Failed to load app state:', error);\n      return {};\n    }\n  }\n\n  // Export data\n  static exportData() {\n    const data = {\n      sessions: this.loadSessions(),\n      calmZones: this.loadCalmZones(),\n      stressZones: this.loadStressZones(),\n      exportDate: new Date().toISOString(),\n      version: '1.0.0'\n    };\n    return JSON.stringify(data, null, 2);\n  }\n\n  // Clear all data\n  static clearAllData() {\n    Object.values(STORAGE_KEYS).forEach(key => {\n      localStorage.removeItem(key);\n    });\n  }\n}","map":{"version":3,"names":["STORAGE_KEYS","SESSIONS","CALM_ZONES","STRESS_ZONES","APP_STATE","StorageService","saveSessions","sessions","localStorage","setItem","JSON","stringify","error","console","loadSessions","data","getItem","parse","addSession","session","push","updateSession","index","findIndex","s","id","saveCalmZones","zones","loadCalmZones","saveStressZones","loadStressZones","saveAppState","state","currentState","loadAppState","newState","exportData","calmZones","stressZones","exportDate","Date","toISOString","version","clearAllData","Object","values","forEach","key","removeItem"],"sources":["C:/Users/usman/.cursor/alzense/src/services/storage.ts"],"sourcesContent":["import { WalkSession, CalmZone, StressZone, AppState } from '../types';\r\n\r\nconst STORAGE_KEYS = {\r\n  SESSIONS: 'alzense_sessions',\r\n  CALM_ZONES: 'alzense_calm_zones',\r\n  STRESS_ZONES: 'alzense_stress_zones',\r\n  APP_STATE: 'alzense_app_state'\r\n};\r\n\r\nexport class StorageService {\r\n  // Sessions\r\n  static saveSessions(sessions: WalkSession[]): void {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEYS.SESSIONS, JSON.stringify(sessions));\r\n    } catch (error) {\r\n      console.error('Failed to save sessions:', error);\r\n    }\r\n  }\r\n\r\n  static loadSessions(): WalkSession[] {\r\n    try {\r\n      const data = localStorage.getItem(STORAGE_KEYS.SESSIONS);\r\n      return data ? JSON.parse(data) : [];\r\n    } catch (error) {\r\n      console.error('Failed to load sessions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  static addSession(session: WalkSession): void {\r\n    const sessions = this.loadSessions();\r\n    sessions.push(session);\r\n    this.saveSessions(sessions);\r\n  }\r\n\r\n  static updateSession(session: WalkSession): void {\r\n    const sessions = this.loadSessions();\r\n    const index = sessions.findIndex(s => s.id === session.id);\r\n    if (index !== -1) {\r\n      sessions[index] = session;\r\n      this.saveSessions(sessions);\r\n    }\r\n  }\r\n\r\n  // Calm Zones\r\n  static saveCalmZones(zones: CalmZone[]): void {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEYS.CALM_ZONES, JSON.stringify(zones));\r\n    } catch (error) {\r\n      console.error('Failed to save calm zones:', error);\r\n    }\r\n  }\r\n\r\n  static loadCalmZones(): CalmZone[] {\r\n    try {\r\n      const data = localStorage.getItem(STORAGE_KEYS.CALM_ZONES);\r\n      return data ? JSON.parse(data) : [];\r\n    } catch (error) {\r\n      console.error('Failed to load calm zones:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Stress Zones\r\n  static saveStressZones(zones: StressZone[]): void {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEYS.STRESS_ZONES, JSON.stringify(zones));\r\n    } catch (error) {\r\n      console.error('Failed to save stress zones:', error);\r\n    }\r\n  }\r\n\r\n  static loadStressZones(): StressZone[] {\r\n    try {\r\n      const data = localStorage.getItem(STORAGE_KEYS.STRESS_ZONES);\r\n      return data ? JSON.parse(data) : [];\r\n    } catch (error) {\r\n      console.error('Failed to load stress zones:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // App State\r\n  static saveAppState(state: Partial<AppState>): void {\r\n    try {\r\n      const currentState = this.loadAppState();\r\n      const newState = { ...currentState, ...state };\r\n      localStorage.setItem(STORAGE_KEYS.APP_STATE, JSON.stringify(newState));\r\n    } catch (error) {\r\n      console.error('Failed to save app state:', error);\r\n    }\r\n  }\r\n\r\n  static loadAppState(): Partial<AppState> {\r\n    try {\r\n      const data = localStorage.getItem(STORAGE_KEYS.APP_STATE);\r\n      return data ? JSON.parse(data) : {};\r\n    } catch (error) {\r\n      console.error('Failed to load app state:', error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  // Export data\r\n  static exportData(): string {\r\n    const data = {\r\n      sessions: this.loadSessions(),\r\n      calmZones: this.loadCalmZones(),\r\n      stressZones: this.loadStressZones(),\r\n      exportDate: new Date().toISOString(),\r\n      version: '1.0.0'\r\n    };\r\n    return JSON.stringify(data, null, 2);\r\n  }\r\n\r\n  // Clear all data\r\n  static clearAllData(): void {\r\n    Object.values(STORAGE_KEYS).forEach(key => {\r\n      localStorage.removeItem(key);\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AAEA,MAAMA,YAAY,GAAG;EACnBC,QAAQ,EAAE,kBAAkB;EAC5BC,UAAU,EAAE,oBAAoB;EAChCC,YAAY,EAAE,sBAAsB;EACpCC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,cAAc,CAAC;EAC1B;EACA,OAAOC,YAAYA,CAACC,QAAuB,EAAQ;IACjD,IAAI;MACFC,YAAY,CAACC,OAAO,CAACT,YAAY,CAACC,QAAQ,EAAES,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;IACvE,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF;EAEA,OAAOE,YAAYA,CAAA,EAAkB;IACnC,IAAI;MACF,MAAMC,IAAI,GAAGP,YAAY,CAACQ,OAAO,CAAChB,YAAY,CAACC,QAAQ,CAAC;MACxD,OAAOc,IAAI,GAAGL,IAAI,CAACO,KAAK,CAACF,IAAI,CAAC,GAAG,EAAE;IACrC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,EAAE;IACX;EACF;EAEA,OAAOM,UAAUA,CAACC,OAAoB,EAAQ;IAC5C,MAAMZ,QAAQ,GAAG,IAAI,CAACO,YAAY,CAAC,CAAC;IACpCP,QAAQ,CAACa,IAAI,CAACD,OAAO,CAAC;IACtB,IAAI,CAACb,YAAY,CAACC,QAAQ,CAAC;EAC7B;EAEA,OAAOc,aAAaA,CAACF,OAAoB,EAAQ;IAC/C,MAAMZ,QAAQ,GAAG,IAAI,CAACO,YAAY,CAAC,CAAC;IACpC,MAAMQ,KAAK,GAAGf,QAAQ,CAACgB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;IAC1D,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;MAChBf,QAAQ,CAACe,KAAK,CAAC,GAAGH,OAAO;MACzB,IAAI,CAACb,YAAY,CAACC,QAAQ,CAAC;IAC7B;EACF;;EAEA;EACA,OAAOmB,aAAaA,CAACC,KAAiB,EAAQ;IAC5C,IAAI;MACFnB,YAAY,CAACC,OAAO,CAACT,YAAY,CAACE,UAAU,EAAEQ,IAAI,CAACC,SAAS,CAACgB,KAAK,CAAC,CAAC;IACtE,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF;EAEA,OAAOgB,aAAaA,CAAA,EAAe;IACjC,IAAI;MACF,MAAMb,IAAI,GAAGP,YAAY,CAACQ,OAAO,CAAChB,YAAY,CAACE,UAAU,CAAC;MAC1D,OAAOa,IAAI,GAAGL,IAAI,CAACO,KAAK,CAACF,IAAI,CAAC,GAAG,EAAE;IACrC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,EAAE;IACX;EACF;;EAEA;EACA,OAAOiB,eAAeA,CAACF,KAAmB,EAAQ;IAChD,IAAI;MACFnB,YAAY,CAACC,OAAO,CAACT,YAAY,CAACG,YAAY,EAAEO,IAAI,CAACC,SAAS,CAACgB,KAAK,CAAC,CAAC;IACxE,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF;EAEA,OAAOkB,eAAeA,CAAA,EAAiB;IACrC,IAAI;MACF,MAAMf,IAAI,GAAGP,YAAY,CAACQ,OAAO,CAAChB,YAAY,CAACG,YAAY,CAAC;MAC5D,OAAOY,IAAI,GAAGL,IAAI,CAACO,KAAK,CAACF,IAAI,CAAC,GAAG,EAAE;IACrC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,EAAE;IACX;EACF;;EAEA;EACA,OAAOmB,YAAYA,CAACC,KAAwB,EAAQ;IAClD,IAAI;MACF,MAAMC,YAAY,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;MACxC,MAAMC,QAAQ,GAAG;QAAE,GAAGF,YAAY;QAAE,GAAGD;MAAM,CAAC;MAC9CxB,YAAY,CAACC,OAAO,CAACT,YAAY,CAACI,SAAS,EAAEM,IAAI,CAACC,SAAS,CAACwB,QAAQ,CAAC,CAAC;IACxE,CAAC,CAAC,OAAOvB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF;EAEA,OAAOsB,YAAYA,CAAA,EAAsB;IACvC,IAAI;MACF,MAAMnB,IAAI,GAAGP,YAAY,CAACQ,OAAO,CAAChB,YAAY,CAACI,SAAS,CAAC;MACzD,OAAOW,IAAI,GAAGL,IAAI,CAACO,KAAK,CAACF,IAAI,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,CAAC,CAAC;IACX;EACF;;EAEA;EACA,OAAOwB,UAAUA,CAAA,EAAW;IAC1B,MAAMrB,IAAI,GAAG;MACXR,QAAQ,EAAE,IAAI,CAACO,YAAY,CAAC,CAAC;MAC7BuB,SAAS,EAAE,IAAI,CAACT,aAAa,CAAC,CAAC;MAC/BU,WAAW,EAAE,IAAI,CAACR,eAAe,CAAC,CAAC;MACnCS,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACpCC,OAAO,EAAE;IACX,CAAC;IACD,OAAOhC,IAAI,CAACC,SAAS,CAACI,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;EACtC;;EAEA;EACA,OAAO4B,YAAYA,CAAA,EAAS;IAC1BC,MAAM,CAACC,MAAM,CAAC7C,YAAY,CAAC,CAAC8C,OAAO,CAACC,GAAG,IAAI;MACzCvC,YAAY,CAACwC,UAAU,CAACD,GAAG,CAAC;IAC9B,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}